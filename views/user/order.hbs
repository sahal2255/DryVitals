<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details</title>
    <!-- Include Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Include your custom CSS file -->

    <style>
        /* Custom CSS styles */
        body {
            background-color: #acc3db;
            font-family: Verdana, Geneva, Tahoma, sans-serif;
        }

        .container {
            margin-top: 70px;
            max-width: 1500px;
        }

        .card {
            border: none;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease-in-out;
        }

        .card:hover {
            transform: translateY(-5px);
        }

        .card-header {
            background-color: #582c00;
            color: #fff;
            padding: 15px;
            border-radius: 10px 10px 0 0;
        }

        /* Additional styling for order summary */
        .order-summary {
            background-color: #fff;
            border-radius: 10px;
            overflow: hidden;
            margin-bottom: 20px;
            /* Add some space between sections */
        }

        .order-summary table {
            width: 100%;
            margin-bottom: 0;
            border-collapse: collapse;
        }

        .order-summary th,
        .order-summary td {
            padding: 15px 10px;
            /* Increase padding for better spacing */
            text-align: center;
            vertical-align: middle;
            border: 1px solid #dee2e6;
        }

        .order-summary th {
            background-color: #f8f9fa;
            color: #495057;
        }

        .order-summary th:first-child,
        .order-summary td:first-child {
            text-align: left;
        }

        .order-summary th:last-child,
        .order-summary td:last-child {
            text-align: right;
        }

        .order-total {
            margin-top: 20px;
            padding: 15px;
            background-color: #f8f9fa;
            border-top: 1px solid #dee2e6;
            border-radius: 0 0 10px 10px;
            text-align: end;
        }

        /* Additional styling for delivery details */
        .delivery-details {
            background-color: #f8f9fa;
            border-radius: 10px;
            
            margin-bottom: 20px;
        }

        .delivery-details p {
            margin-bottom: 10px;
        }

        .delivery-details .card-header {
            background-color: #582c00;
            color: #fff;
            padding: 15px;
            border-radius: 10px 10px 0 0;
        }

        .delivery-details .card-body {
            padding-top: 20px;
            /* Add some space above content */
        }

        .delivery-details .btn-primary {
            width: 100%;
        }

        .delivery-details p {
            font-size: 16px;
        }
    </style>
</head>

<body>

    <div class="container">
        <h1 class="text-center mb-4">Order Details</h1>
        <div class="row">
            <div class="col-md-8">
                <div class="card order-summary">
                    <div class="card-header">
                        <h2 class="mb-0">Order Summary</h2>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Date</th>

                                        <th>Payment Method</th>
                                        <th>Price</th>
                                        <th>Status</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                {{#each orderDetails}}
                                    {{#each this.cartProducts}}
                                    <tr data-order-id="{{../_id}}">
                                        <td>
                                            {{!-- {{#with createdAt}} --}}
                                            {{../createdAt}}
                                            {{!-- {{/with}} --}}
                                        </td>

                                        <td>{{../selectedPaymentMethod}}</td>
                                        <td>{{../totalAmount}}</td>

                                        <td>{{../status}}</td>
                                        <td><button type="button" class="btn btn-primary" data-toggle="modal"
                                                data-target="#exampleModalCenter" onclick="getOrderDetails()">
                                                view
                                            </button></td>
                                    </tr>
                                    {{/each}}

                    {{/each}}
                                </tbody>
                            </table>
                        </div>
                        <div class="order-total">

                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card delivery-details">
                    <div class="card-header">
                        <h2 class="mb-0">Delivery Address</h2>
                    </div>

                    {{#if orderDetails.length}}
                    <div class="card-body">
                        <p><strong>Name:</strong> <span id="name">{{orderDetails.[0].userData.userName}}</span></p>
                        <p><strong>Email:</strong> <span id="email">{{orderDetails.[0].userData.email}}</span></p>
                        <p><strong>Phone:</strong> <span id="phone">{{orderDetails.[0].userData.phoneNumber}}</span>
                        </p>
                        <p><strong>District:</strong> <span
                                id="district">{{orderDetails.[0].userAddress.district}}</span></p>
                        <p><strong>Place:</strong> <span id="place">{{orderDetails.[0].userAddress.place}}</span></p>
                        <p><strong>Address:</strong> <span id="address">{{orderDetails.[0].userAddress.address}}</span>
                        </p>
                        <p><strong>Pincode:</strong> <span id="pincode">{{orderDetails.[0].userAddress.pincode}}</span>
                        </p>
                    </div>
                    {{/if}}



                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog"
        aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLongTitle">Modal title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="btn-cancel">Cancel</button>
                </div>
            </div>
        </div>
    </div>



    <script>
        

        async function getOrderDetails() {
            const orderId = event.target.closest('tr').dataset.orderId;
            console.log(orderId)
            try {
                const response = await axios.get(`/singleOrderDetails/${orderId}`); // Corrected typo in URL
                showOrderDetails(response.data.singleorder);  // Accessing correct property in response data
            } catch (error) {
                console.error('Error fetching order details:', error);
                // Handle error gracefully, e.g., display an error message to the user
            }
        }

        function showOrderDetails(orderDetails) {
            const modalBody = document.querySelector('.modal-body');
            modalBody.innerHTML = `
        <p>Order ID: ${orderDetails._id}</p>
        <input type="hidden" value="${orderDetails._id}" id="orderId">
        <p>Created At: ${orderDetails.createdAt}</p>
        <p>Payment Method: ${orderDetails.selectedPaymentMethod}</p>
        <p>Total Amount: ${orderDetails.totalAmount}</p>
        
        
    `;
        }

        // Function to handle the click event on the "Cancel" button
        async function handleCancelButtonClick() {
            const orderId = document.getElementById('orderId').value;

            // Display confirmation dialog using SweetAlert
            const isConfirmed = await Swal.fire({
                title: 'Are you sure?',
                text: 'Once cancelled, you will not be able to recover this order!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, cancel it!',
                cancelButtonText: 'No, keep it'
            });

            // Check if user confirmed the action
            if (isConfirmed.isConfirmed) {
                try {
                    const response = await axios.delete(`/orders/${orderId}`);

                    if (response.status === 200) {
                        // Show success message
                        Swal.fire('Cancelled!', 'Your order has been cancelled.', 'success')
                            .then(() => {
                                // Refresh the page
                                window.location.reload();
                            });
                    } else {
                        // Show error message
                        Swal.fire('Error!', 'Failed to cancel order.', 'error');
                    }
                } catch (error) {
                    // Show error message
                    Swal.fire('Error!', 'Failed to cancel order.', 'error');
                    console.error('Error cancelling order:', error);
                }
            }
        }

        // Add event listener to the "Cancel" button
        document.getElementById('btn-cancel').addEventListener('click', handleCancelButtonClick);

    </script>

    <!-- jQuery -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

    <!-- Include Bootstrap JS -->
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Include Axios and SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>

</body>

</html>